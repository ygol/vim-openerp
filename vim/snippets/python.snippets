snippet #!
	#!/usr/bin/env python
snippet coding
	# -*- coding: ${1:utf-8} -*-
snippet imp
	import ${1:module}
snippet from
	from ${1:module} import ${2:class}
snippet osv with exceptions
	from openerp import models, api, fields, exceptions
	${1}
snippet osv without exceptions
	from openerp import models, api, fields
	${1}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
snippet copyright
	##############################################################################
	#
	#    ${1:ModuleName} module for OpenERP, ${2:Description}
	#    Copyright (C) ${3:200X} ${4:Company} (<http://${5:website}>) ${6:author}
	#
	#    This file is a part of $1
	#
	#    $1 is free software: you can redistribute it and/or modify
	#    it under the terms of the GNU General Public License as published by
	#    the Free Software Foundation, either version 3 of the License, or
	#    (at your option) any later version.
	#
	#    $1 is distributed in the hope that it will be useful,
	#    but WITHOUT ANY WARRANTY; without even the implied warranty of
	#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	#    GNU General Public License for more details.
	#
	#    You should have received a copy of the GNU General Public License
	#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
	#
	##############################################################################
	${7}
snippet config
	# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
# this snippet is usefull to clear the rule cache
# specialy with OpenObject 5.2 and multi company
snippet rule
	self.pool.get('ir.rule').domain_get.clear_cache(cr.dbname)
#
# Define class for OpenObject
#
snippet oo OpenObject Class
	class ${1:ClassName}(models.Model):
		_name = '${2:ObjectName}'
		_description = '${3}'
	
		${4}
	
snippet ooi OpenObject Class Inherit
	class ${1:ClassName}(models.Model):
		_inherit = '${2:ObjectName}'
	
		${3}
	
snippet oom Wizard osv_memory
	class ${1:ClassName}(osv.osv_memory):
		_name = '${2:ObjectName}'
		_description = '${3:Description}'
	
		_columns = {
			${4}
		}
	
	$1()
	
snippet oom Wizard TransientModel
	class ${1:ClassName}(models.TransientModel):
		_name = '${2:ObjectName}'
		_description = '${3:Description}'
	
		${4}
	
snippet oomi Wizard TransientModel Inherit
	class ${1:ClassName}(models.TransientModel):
		_inherit = '${2:ObjectName}'
	
		${3}
	
snippet this (use in wizard)
	this = self.browse(cr, uid, ids[0], context=context)
#
# Define type of fields (New API)
#
snippet field fields.Char
	${1:fieldname} = fields.Char(string='${2:Label}', size=${3:64}, ${5}help='${4:Help note}')${6}
snippet field fields.Integer
	${1:fieldname} = fields.Integer(string='${2:Label}', ${4}help='${3:Help note}')${5}
snippet field fields.Float
	${1:fieldname} = fields.Float(string='${2:Label}', digits_compute=dp.get_precision('${3:PrecisionName}'), ${5}help='${4:Help note}')${6}
snippet field fields.Boolean
	${1:fieldname} = fields.Boolean(string='${2:Label}', ${4}help='${3:Help note}')${5}
snippet field fields.Date
	${1:fieldname} = fields.Date(string='${2:Label}', ${4}help='${3:Help note}')${5}
snippet field fields.Datetime
	${1:fieldname} = fields.Datetime(string='${2:Label}', ${4}help='${3:Help note}')${5}
snippet field fields.Selection
	${1:fieldname} = fields.Selection(selection=${2:[('', '')]}, string='${3:Label}', ${5}help='${4:Help note}')${6}
snippet field fields.Many2one
	${1:fieldname}_id = fields.Many2one(comodel_name='${2:ObjectName}', string='${3:Label}', ${5}help='${4:Help note}')${6}
snippet field fields.Many2many
	${1:fieldname}_ids = fields.Many2many(comodel_name='${2:ObjectName}', string='${3:Label}', ${5}help='${4:Help note}')${6}
snippet field fields.One2many
	${1:fieldname}_ids = fields.One2many(comodel_name='${2:ObjectName}', inverse_name='${3:fieldname}_id', string='${4:Label}', ${6}help='${5:Help note}')${7}
snippet field fields.Property
	${1:fieldname} = fields.Property('${2:object}', method=${3:True},
			    string='${4:label}', type='${5:many2one}', ${7}help='${6:Help note}')${8}
snippet field fields.Text
	${1:fieldname} = fields.Text(string='${2:Label}', ${4}help='${3:Help note}')${5}
snippet field fields.Binary
	${1:fieldname} = fields.Binary(string='${2:Label}', ${4}help='${3:Help note}')${5}
snippet field fields.Reference
	${1:fieldname} = fields.Reference(string='${2:Label}', selection=${3:[('', '')]}, size=128, ${5}help='${4:Help note}')${6}
# Attribute for fields
snippet domain
	domain=[('${1:state}', '${2:=}', '${3:done}')]
snippet help
	help='${1:Help about Field}',
snippet readonly
	readonly=True, ${1}
snippet required
	required=True, ${1}
snippet translate import
	from openerp.tools.translate import _
snippet translate argument
	translate=True, ${1}
snippet dp
	digits_compute=dp.get_precision('${1:PrecisionName}'), ${2}
snippet digits digits
	digits=(${1:16}, ${2:2}), ${3}
snippet digits digits_compute
	digits_compute=dp.get_precision('${1:PrecisionName}'), ${2}
snippet select
	select=True, ${1}
snippet ondel OnDelete Cascade
	ondelete='cascade', ${1}
snippet ondel OnDelete Set Null
	ondelete='set null', ${1}
snippet ondelete OnDelete Cascade
	ondelete='cascade', ${1}
snippet ondelete OnDelete Set Null
	ondelete='set null', ${1}
snippet store
	store=True, ${1}
snippet compute compute
	compute='${1:_methodName}', ${2}
snippet compute inverse
	inverse='${1:_methodName}', ${2}
snippet compute search
	search='${1:_methodName}', ${2}
snippet relate
	relate='${1:field.chain}', ${2}
snippet default
	default='${1:value}', ${2}
#
# Define function in model
#
snippet func def search
	def search(self, cr, user, args, offset=0, limit=None, order=None, context=None, count=False):
	    if context is None:
	        context = {}
	
	    res = super(${2:ClassName}, self).search(cr, user, args, offset=offset, limit=limit, order=order, context=context, count=count)
	    ${3}
	    return res
snippet func def read
	@api.v8
	def read(self, fields=None, load='_classic_read'):
	    res = super(${1:ClassName}, self).read(fields, load=load)
	    ${3}
	    return res
snippet func def create
	@api.model
	@api.returns('self', lambda value: value.id)
	def create(self, vals):
	    res = super(${1:ClassName}, self).create(vals)
	    ${3}
	    return res
snippet func def write
	@api.multi
	def write(self,vals):
	    res = super(${1:ClassName}, self).write(vals)
	    ${3}
	    return res
snippet func def unlink
	def unlink(self, cr, uid, ids, context=None):
	    if context is None:
	        context = {}
	    ${3}
	    res = super(${1:ClassName}, self).unlink(cr, uid, ids, context=context)
	    return res
snippet func def copy
	@api.returns('self', lambda value: value.id)
	def copy(self, cr, uid, id, default=None, context=None):
	    if context is None:
	        context = {}
	    ${3}
	    return super(${1:ClassName}, self).copy(cr, uid, id, default, context=context)
snippet func def default_get
	@api.model
	def default_get(self, fields_list):
	    values = super(${2:ClassName}, self).default_get(fields_list)
	    ${3}
	    return values
snippet func def fields_get
	def fields_get(self, cr, user, allfields=None, context=None, write_access=True, attributes=None):
	    if context is None:
	        context = {}
	    ${3}
	    return super(${1:ClassName}, self).fields_get(cr, user, allfields, context, write_access, attributes)
snippet func def init
	def init(self, cr):
	    cr.execute("""CREATE OR REPLACE VIEW ${1:View} AS (
	            ${3:SELECT...})
	    """)
	${4}
snippet func def name_get
	@api.multi
	def name_get(self):
	    res = super(${1:ClassName}, self).name_get()
	    ${2}
	    return res
snippet func def name_search
	@api.model
	def name_search(self, name, args=None, operator='ilike', limit=100):
	    res = super(${1:ClassName}, self).name_search(name, args, operator, limit)
	    ${2}
	    return res
snippet func on_change
	@api.multi
	def onchange(self, values, field_name, field_onchange):
	    res = super(${1:ClassName}, self).onchange(values, field_name, field_onchange)
	    ${2}
	    return res
snippet func fields_view_get
	def fields_view_get(self, cr, uid, view_id=None, view_type='form', context=None, toolbar=False, submenu=False):
	    res = super(${1:ClassName}, self).fields_view_get(cr, uid, view_id, context, toolbar, submenu)
	    ${2}
	    return res

#
# Common methods defined in Model (New API)
#
snippet Func search (other model)
	self.env['${1:model}'].search([${2:('name', '=', name)}])
snippet Func browse (other model)
	self.env['${1:model}'].browse(${2:ids})
snippet Func create (other model)
	self.env['${1:model}'].create(${2:values})
snippet Func write (other model)
	self.env['${1:model}'].write(${2:values})
snippet Func copy (other model)
	self.env['${1:model}'].copy(${2:values})
snippet Func unlink (other model)
	self.env['${1:model}'].unlink(${2:values})
snippet Func search (same model)
	self.search([${2:('name', '=', name)}])
snippet Func browse (same model)
	self.browse(${2:ids})
snippet Func create (same model)
	self.create(${2:values})
snippet Func write (same model)
	self.write(${2:values})
snippet Func copy (same model)
	self.copy(${2:values})
#
# Define all variables in Model begin by _
#
snippet _ _auto
	_auto = False
snippet _ _columns
	_columns = {
	    ${1:# ... code}
	}
	${2}
snippet _ _constraints
	def ${1:_check_method}(self, cr, uid, ids, context=None):
	    #TODO : check condition and return boolean accordingly
	    if context is None:
	        context = {}
	    return True
	
	_constraints = [
	    ($1, 'Error: Invalid Message', ['${2:field_name}']),
	]
snippet _ _date_name
	_date_name='${1:Date field}'
snippet _ _defaults
	_defaults = {
	    '${1:Field}': lambda *a: ${2:Value},
	}
snippet _ _description
	_description = ${1:Object description}
snippet _ _order
	_order = '${1:Field name to order}'
snippet _ _parent_store
	_parent_store = ${1:False}
snippet _ _rec_name
	_rec_name = '${1:Field name}'
snippet _ _sequence
	_sequence = '${1:Field name use as sequence}'
snippet _ _sql_constraints unique
	_sql_constraints = [
	    ('${1:Field name}_unique', 'UNIQUE ($1)', 'The $1 of the OpenERPModel must be unique !'),
	]
snippet _ _sql_constraints check
	_sql_constraints = [
	    ('${1:Field name}_check', 'CHECK ($1)', 'Check error for $1 !'),
	]
snippet _ _table
	_table = '${1:Table name in PostgreSQL}'
snippet _ _sql
	_sql = """${1:CREATE TABLE .....}"""
snippet _ _log_access
	_log_access = False
snippet . search
	.search(${1:domain}, offset=${2:0}, limit=${3:None}, order=${4:None})${5}
snippet . browse
	.browse(${1:ids})${2}
snippet . create
	.create(${1:vals})${2}
snippet . write
	.write(${1:vals})${2}
snippet . unlink
	.unlink()${1}
snippet . copy
	.copy(${1:default})${2}
###
## define exception
snippet except raise exceptions.Warning(message)
	raise exceptions.Warning(_('${1:Message}'))
snippet except raise exceptions.RedirectWarning(message, action, button_text)
	raise exceptions.RedirectWarning(_('${1:Message}'), ${2:action_id}, _('${3:Button Text}'))
###
## Cursor
snippet cr cr.execute()
	cr.execute("""${1:Query}""")
snippet cr cr.mogrify()
	cr.mogrify("""${1:Query}""")
snippet cr cr.commit()
	cr.commit()
snippet cr cr.rollback()
	cr.rollback()
snippet cr cr.close()
	cr.close()
snippet cr cr.autocommit()
	cr.autocommit(${1:True})
snippet cr cr.fetchall()
	cr.fetchall()
snippet cr cr.dictfetchall()
	cr.dictfetchall()
snippet cr cr.fetchone()
	cr.fetchone()
# Usefull tips
snippet pooler
	pooler.get_pool(cr.dbname)
snippet pool
	pool.get('${1:res.partner}')${2}
snippet !context
	if context is None:
	    context = {}
#
# Usefull Snippet
#
snippet active
	active = fields.Boolean('${1:Active?}', default=True, readonly=True)
snippet sequence
	sequence = fields.Integer('${1:Sequence}')
snippet color
	color = fields.Integer('${1:Color}', default=0)
snippet state
	state = fields.Selection(${1:[('', '')]}, '${2:Label}', help='${3:Help note}', default=i'${4:draft}')
snippet logger
	import netsvc
	logger = netsvc.Logger()
snippet logging
	import logging
	logger = logging.getLogger('${1:module}')
snippet notify
	logger.notifyChannel('${1:module}', netsvc.${2:LOG_DEBUG}, '${3:Message}')${4}
snippet log Debug
	logger.debug('${1}')
snippet log Info
	logger.info('${1}')
snippet log Warning
	logger.warning('${1}')
snippet log Error
	logger.error('${1}')
snippet ctx
	ctx = context.copy()
#
# Other python declaration
#
snippet fm
# New Function
snippet super
	super(${1:ClassName}, self).${2:methodName}(cr, uid, ${3:ids}, ${4}context=context)${5}
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
	    '''${3:docstring for $1}'''
	    ${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
	    ${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
	    ${3:pass}
# Override method
snippet defo No params
	def ${1:fname}(self):
	    return super(${2:cname}, self).$1()
snippet defo With params
	def ${1:fname}(self, ${2:params}):
	    return super(${3:cname}, self).$1($2)
# New Property
snippet property
	def ${1:foo}():
	    doc = "${2:The $1 property.}"
	    def fget(self):
	        ${3:return self._$1}
	    def fset(self, value):
	        ${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet self.
	self.${1:method}(${2})
snippet try Try/Except
	try:
	    ${1:pass}
	except ${2:Exception}, ${3:e}:
	    ${4:raise $3}
snippet try Try/Except/Else
	try:
	    ${1:pass}
	except ${2:Exception}, ${3:e}:
	    ${4:raise $3}
	else:
	    ${5:pass}
snippet try Try/Except/Finally
	try:
	    ${1:pass}
	except ${2:Exception}, ${3:e}:
	    ${4:raise $3}
	finally:
	    ${5:pass}
snippet try Try/Except/Else/Finally
	try:
	    ${1:pass}
	except ${2:Exception}, ${3:e}:
	    ${4:raise $3}
	else:
	    ${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
	    ${1:main()}
# __magic__
snippet _ __init__
	__${1:init}__${2}
snippet ifcontext
	if context is None:
	    context = {}
	${1}
snippet pdb
	import pdb
	pdb.set_trace()
snippet date to_string
	fields.Date.to_string(${1:datetime instance})${2}
snippet date from_string
	fields.Date.from_string(${1:datetime string})${2}
snippet date today
	fields.Date().today()
snippet datetime to_string
	fields.Datetime.to_string(${1:datetime instance})${2}
snippet datetime from_string
	fields.Datetime.from_string(${1:datetime string})${2}
snippet datetime today
	fields.Datetime().today()
# workflow
snippet trg trg_write
	wf_service = netsvc.LocalService("workflow")
	wf_service.trg_write(uid, '${1:model}', ${2:id}, cr)
snippet trg trg_trigger
	wf_service = netsvc.LocalService("workflow")
	wf_service.trg_trigger(uid, '${1:model}', ${2:id}, cr)
snippet trg trg_delete
	wf_service = netsvc.LocalService("workflow")
	wf_service.trg_delete(uid, '${1:model}', ${2:id}, cr)
snippet trg trg_create
	wf_service = netsvc.LocalService("workflow")
	wf_service.trg_create(uid, '${1:model}', ${2:id}, cr)
snippet trg trg_validate
	wf_service = netsvc.LocalService("workflow")
	wf_service.trg_validate(uid, '${1:model}', ${2:id}, '${3:signal}', cr)
snippet trg trg_redirect
	wf_service = netsvc.LocalService("workflow")
	wf_service.trg_redirect(uid, '${1:model}', ${2:id}, ${3:new id}, cr)
snippet context_get
	context = self.pool.get('res.users').context_get(cr, uid)
# Decorators
snippet @ model
	@api.model
snippet @ multi
	@api.multi
snippet @ one
	@api.one
snippet @ returns
	@api.returns('${1:model}')${2}
snippet @ constrains
	@api.constrains('${1:field}')${2}
snippet @ onchange
	@api.onchange('${1:field}')${2}
snippet @ depends
	@api.depends('${1:field.chain}')${2}
# Environment access
snippet env cr
	self.env.cr
snippet env uid
	self.env.uid
snippet env user
	self.env.user
snippet env context
	self.env.context
snippet env ref
	self.env.ref('${1:xml id}')${2}
snippet env model
	self.env['${1:model}']${2}
snippet env new env
	self.env(${1:cr}, ${2:uid}, ${3:context})${4}
snippet env with_env
	self.env.with_env(${1:env})${2}
snippet env with_context
	self.env.with_context(${1:context})${2}
snippet env sudo
	self.env.sudo(${1:uid})${2}
snippet manifest
	{
	    'name': '${1:module}',
	    'summary': 'Short $1 Summary',
	    'version': '1.0',
	    'depends': ['base'],
	    'author': '${2:`g:snips_author`}',
	    'contributors': '',
	    'maintainer': '',
	    'license': '${3:AGPL-3}',
	    'website': 'http://${4:www.example.org}',
	    'category': '${5:Extra Tools}',
	    'description': '''
	    Description text

	    For $1 application.
	    ''',
	    'data': [
	        'security/ir.model.access.csv',
	        'views/$1_views.xml',
	    ],
	    'demo': ['data/demo.xml'],
	    'test': [],
	    'qweb': [],
	    'sequence': 10,
	    'installable': True,
	    'application': True,
	}
